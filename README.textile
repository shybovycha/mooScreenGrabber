h1. Meet mooScreenGrabber!

*mooScreenGrabber* is supposed to create screen casts on Unix (ones supporting X11) systems. What made me to create one? Videos from "RailsCasts":http://railscasts.com/ contain those pretty keyboard shortcut notifications. And that is the idea - to make possible to show shortcut pressed while grabbing screen.

h1. What's the current state?

The project has only a few commits now. And most of them are initial. So, do not account to observe a cool ready-for-wide-use software, please.

For now we have:

* capturing screenshots each N milliseconds (N = 10)
* saving screenshots as *PNG* images to the CWD(Current Working Directory)
* capturing a lot of keyboard shortcuts (ones with *Alt*, *Control* and *Shift*; *Alt + Tab* included) and pasting them to the screenshots
* a few image set examples

h1. Any support needed?

Yes, please. If you do know a way to _create video from a set of images_ or how to _capture video and audio in X11_ or _how to decrease lagging_ or _you do want to test this software_ - let me know, please.

h1. And how should i proceed?

Simply checkout this repository somewhere on your machine, compile the code and use it for your "pleasure".

To perform compilation you should have these installed:

* *Qt 4* to actually compile the software
* *libx11-dev*
* *libxfixes-dev* - those two are just dependencies to grab a screenshot
* *ffmpeg* (to compile a set of images to video)
* *mmv* to massively rename screenshot images (for now)

h1. Compilation? What? Why?

One dude "suggested":http://lunduke.com/?p=3606 a great idea (and i found it on "habrahabr":http://habrahabr.ru/): distribute opensource *as-is* and do not provide any binaries. But those chosen ones who donated may be emailed with their own copy of the software binaries, built *especially* for them.

And, you know, i think it is the way it should go. Because /me, personally, does not want to make least moves to compile many binaries by my own.

h1. Okay, i've got the binaries. What's next?

h2. General layout

Run the binary, choose options you would like and hit the *"start shooting"* button. Then perform some actions that you want to be shown at your screencast - enjoy using software. Well, up until your PC frezes =P Then you should kill the software somehow. I did not find a way to prevent that great memory leak for now. If your PC did not freeze - you are lucky! Hit the *"stop shooting"* button.

Now, when you've finished recording your screen, you've got a lot of __<PATTERN>.png__ files at your working directory. You can convert them to a one video file using *ffmpeg* (or *avconv* - ffmpeg's developers say *ffmpeg is deprecated*):

__$ avconv -r <FRAMERATE> -b <BITRATE> -i "%d.png" -vframes <IMAGE_COUNT> <OUTPUT_FILENAME>__

For example, i used this:

__$ avconv -r 1 -b 1800 -i "%d.png" -vframes 99 video.avi__

h2. Options are available!

From some commit, a few configuration options became available. They are:

* *File naming pattern* - this field must contain *%1* string. That _%1_ shall be replaced with a number, forming a file name for each screenshot. E.g.: if pattern is *screen_%1*, screenshot files will be _screen_1.png_, _screen_2.png_ ... (if the image format selected is *png*).
* *FPS* - that value sets how many screenshots shall be taken per one second. The higher this value - the more smooth resulting video will be and the more memory shall be eaten out. 
* *Output directory* - that is the absolute path to the directory, where all the screenshots will be saved.
* *Image format* - this option sets the screenshot files' extension.
